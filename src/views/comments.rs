use self::models::PageRevision;
use diesel::sql_types::{BigInt, Integer, Text};
use image::imageops::{BiLevel, ColorMap};
use image::io::Reader;
use rocket::fs::NamedFile;
use rocket::http::{CookieJar, Status};
use rocket::response::Redirect;
use slugify::slugify;
extern crate diesel;
extern crate rocket;
use crate::models::{self, AuthenticatedAdmin};
use crate::ManagedState;
use crate::{schema, MemoryDatabase, PersistDatabase};
use chrono::prelude::*;
use diesel::prelude::*;
use diesel::row::Row;
use diesel::sql_types::Nullable;
use diesel::sqlite::{Sqlite, SqliteConnection};
use diesel::{prelude::*, sql_query};
use dotenvy::dotenv;
use image::imageops::colorops::dither;
use image::ImageFormat;
use image::RgbImage;
use image::{open, DynamicImage};
use models::Page;
use pandoc::{PandocOption, PandocOutput};
use pulldown_cmark::{html, Options, Parser};
use rocket::form::Form;
use rocket::fs::TempFile;
use rocket::response::{status::Created, Debug};
use rocket::serde::{json::Json, Deserialize, Serialize};
use rocket::uri;
use rocket::State;
use rocket::{delete, get, post, put, FromForm};
use rocket_dyn_templates::{context, Template};
use slab_tree::*;
use std::collections::HashMap;
use std::fs::File;
use std::io::Cursor;
use std::io::{self, Write};
use std::path::{Path, PathBuf};
use tempdir::TempDir;

type Result<T, E = Debug<diesel::result::Error>> = std::result::Result<T, E>;
